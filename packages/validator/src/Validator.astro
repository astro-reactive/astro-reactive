---
export type HookType = 'onSubmit' | 'onControlBlur';
export interface Props {
	hook: HookType;
}
const { hook = 'onControlBlur' } = Astro.props;
---

<input hidden name="hook" id="hook" value={hook} />

<script>
	import type { HookType } from './Validator.astro';

	// TODO: selectors should by unique IDs generated by our library
	// TODO: implement type guards pls ðŸ˜±
	// TODO: create deserializer util
	const form = document.querySelector('form');
	const hook: HookType = (document.getElementById('hook') as HTMLInputElement).value as HookType;
	const inputs = [...document.querySelectorAll('form input')] as HTMLInputElement[];

	const validatorFn = (e: FocusEvent) => {
		const element = e.target as HTMLInputElement;
		const attributeNames = element?.getAttributeNames() || [];
		const validatorAttirbutes = attributeNames.filter((attribute) =>
			attribute.includes('data-label-validator')
		);

		// insert logic for each validator

		console.log(validatorAttirbutes);
	};

	if (hook === 'onSubmit') {
		form?.addEventListener('submit', (e) => {
			e.preventDefault();
			console.log('build script');
		});
	} else if (hook === 'onControlBlur') {
		console.log('so you want onblur huh');
		inputs?.forEach((input) => {
			input.addEventListener('blur', validatorFn);
		});
	}

	console.log('validator works!');
</script>
