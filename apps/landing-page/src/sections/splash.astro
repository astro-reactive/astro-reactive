---
import { Icon } from "astro-icon";
import Copynpm from "~/components/copynpm.astro";
---

<section class="h-screen flex flex-col astro relative">
  <div id="starfield" class="absolute -z-10 inset-0">
    <canvas id="starfield-canvas"></canvas>
  </div>
  <div
    class="relative flex flex-col-reverse justify-end h-full content-center grid pt-0"
  >
    <div class="flex flex-col w-screen">
      <h2
        class="flex flex-col items-center gap-2 sm:gap-4 sm:self-auto sm:justify-self-end"
      >
        <div
          class="font-extrabold tracking-tighter text-center text-8xl gradient-text"
        >
          Astro. Reactive.
        </div>
      </h2>
      <div
        class="mt-8 flex justify-center flex-col items-center astro-lg:flex-row astro-lg:justify-center"
      >
        <a
          href="https://docs.astro-reactive.dev"
          class="flex items-center w-4/5 astro-md:w-1/2 justify-center bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded transition-colors astro-lg:w-auto"
        >
          <span class="pr-2">Get Started</span>
          <Icon name="mdi:arrow-right" width="20px" height="20px" />
        </a>
        <Copynpm />
      </div>
    </div>
  </div>
</section>

<script>
  const COUNT = 800;
  const SPEED = 0.3;

  class Star {
    x: number;
    y: number;
    z: number;
    xPrev: number;
    yPrev: number;

    constructor(x = 0, y = 0, z = 0) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.xPrev = x;
      this.yPrev = y;
    }

    update(width: number, height: number, speed: number) {
      this.xPrev = this.x;
      this.yPrev = this.y;
      this.z += speed * 0.0675;
      this.x += this.x * (speed * 0.0225) * this.z;
      this.y += this.y * (speed * 0.0225) * this.z;
      if (
        this.x > width / 2 ||
        this.x < -width / 2 ||
        this.y > height / 2 ||
        this.y < -height / 2
      ) {
        this.x = Math.random() * width - width / 2;
        this.y = Math.random() * height - height / 2;
        this.xPrev = this.x;
        this.yPrev = this.y;
        this.z = 0;
      }
    }

    draw(ctx: CanvasRenderingContext2D) {
      ctx.lineWidth = this.z;
      ctx.beginPath();
      ctx.moveTo(this.x, this.y);
      ctx.lineTo(this.xPrev, this.yPrev);
      ctx.stroke();
    }
  }

  const stars = Array.from({ length: COUNT }, () => new Star(0, 0, 0));
  let rafId = 0;

  const canvas: HTMLCanvasElement = document.querySelector("#starfield-canvas");
  const ctx = canvas.getContext("2d");

  const container = document.querySelector("#starfield");
  const resizeObserver = new ResizeObserver(setup);
  resizeObserver.observe(container);

  function setup() {
    rafId > 0 && cancelAnimationFrame(rafId);
    const { clientWidth: width, clientHeight: height } = container;

    const dpr = window.devicePixelRatio || 1;
    canvas.width = width * dpr;
    canvas.height = height * dpr;
    canvas.style.width = `${width}px`;
    canvas.style.height = `${height}px`;
    ctx.scale(dpr, dpr);

    for (const star of stars) {
      star.x = Math.random() * width - width / 2;
      star.y = Math.random() * height - height / 2;
      star.z = 0;
    }

    ctx.translate(width / 2, height / 2);
    ctx.fillStyle = "rgba(0, 0, 0, 0.4)";
    ctx.strokeStyle = "white";
    rafId = requestAnimationFrame(frame);
  }

  function frame() {
    const { clientWidth: width, clientHeight: height } = container;

    for (const star of stars) {
      star.update(width, height, SPEED);
      star.draw(ctx);
    }

    ctx.fillRect(-width / 2, -height / 2, width, height);
    rafId = requestAnimationFrame(frame);
  }
</script>

<style>
  @keyframes float {
    0% {
      transform: translate3d(0, 0, 0);
    }

    100% {
      transform: translate3d(0, 30px, 0);
    }
  }

  @media (prefers-reduced-motion: reduce) {
    :global(#starfield) {
      @apply hidden;
    }

    #splash-bg-fallback {
      @apply block;
    }
  }
</style>
